set runtimepath+=~/.vim,~/.vim/after
set packpath+=~/.vim
"----------------------------
" Plugin
"----------------------------
set runtimepath^=~/.vim/bundle/ctrlp.vim

call plug#begin('~/.vim/plugged')

" Themes
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'
Plug 'kaicataldo/material.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'mhartington/oceanic-next'
Plug 'sonph/onehalf', { 'rtp': 'vim' }

" Dependencies
Plug 'godlygeek/tabular'        " This must come before plasticboy/vim-markdown
Plug 'tpope/vim-rhubarb'        " Dependency for tpope/fugitive
Plug 'Shougo/vimshell'          " Dependency for vim-delve

" General
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'Shougo/echodoc.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'itchyny/calendar.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar'
Plug 'airblade/vim-signify'
Plug 'neomake/neomake'
Plug 'sbdchd/neoformat'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'sebdah/vim-delve'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-commentary'
Plug 'kien/ctrlp.vim'
Plug 'mg979/vim-visual-multi'
Plug 'mileszs/ack.vim'

" CoC
Plug 'neoclide/coc-json', { 'do': 'yarn install --frozen-lockfile && yarn build' }
Plug 'josa42/coc-sh', { 'do': 'yarn install --frozen-lockfile && yarn build' }
Plug 'neoclide/coc-snippets', { 'do': 'yarn install --frozen-lockfile && yarn build' }

" Language Support
Plug 'cespare/vim-toml'
Plug 'fatih/vim-go', {'do': ':GoInstallBinaries'}
Plug 'AndrewRadev/splitjoin.vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'hashivim/vim-terraform'
Plug 'leafgarland/typescript-vim'
Plug 'lifepillar/pgsql.vim'
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown'
Plug 'rodjek/vim-puppet'
Plug 'zimbatm/haproxy.vim'

call plug#end()

"----------------------------
" General Settings
"----------------------------
" Let mapleader be comma.
let mapleader = ","

if (has("nvim"))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
if (has("termguicolors"))
  set termguicolors
endif
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" OceanicNext Color Settings
"set background=light
"colorscheme OceanicNext
"let g:airline_theme='oceanicnext'

syntax on
set t_Co=256
set cursorline
set background=light
colorscheme onehalflight
let g:airline_theme='onehalfdark'

set autoindent            " take indent from previous line
set smartindent           " enable smart indentation
set autoread              " reload file if the file changes on the disk
set autowrite             " write when switching buffers
set autowriteall          " write on :quit
set colorcolumn=120       " highlight the 120th column
set completeopt-=preview  " remove the preview window
set cursorline
set encoding=utf-8
set nospell
set noswapfile
set nowrap
set noerrorbells
set novisualbell
set number                " show number ruler
set ruler
set softtabstop=4
set tabstop=4
set noexpandtab
set title                 " let vim set the terminal title
set updatetime=100        " redraw the status bar often
set showtabline=2
set synmaxcol=200         " don't try to highlight lines longer than 200 characters.
set showcmd
set cmdheight=2
set foldcolumn=2
set splitright
set hidden

nnoremap <leader>bq :<c-u>bp <bar> bd #<cr>
nnoremap <leader>bl :ls<cr>
nnoremap <leader>bd :<c-u>up <bar> %bd <bar> e#<cr>

function! NumberToggle()
  if (&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunction
nnoremap <leader>nt :call NumberToggle()<cr>

" neovim specific settings
if has('nvim')
  " Set the Python binaries neovim is using. Please note that you will need to
  " install the neovim package for these binaries separately like this for
  " example:
  " pip3 install -U neovim
  let g:python_host_prog = '/usr/bin/python'
  let g:python3_host_prog = '/usr/local/bin/python3'
endif

" Enable mouse if possible
if has('mouse')
  set mouse=a
endif

" Allow vim to set custom font and color
syntax enable

" Autosave buffers before leaving them
autocmd BufLeave * silent! :wa

" Remove trailing white spaces on save
autocmd BufWritePre * :%s/\s\+$//e

" Make the cursor a thin line (not a block) and color it differently in insert
" and normal mode. Makes it WAY easier to see where the cursor is.
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

" Go to last active tab
au TabLeave * let g:lasttab = tabpagenr()
nnoremap <silent> <c-l> :exe "tabn ".g:lasttab<cr>
vnoremap <silent> <c-l> :exe "tabn ".g:lasttab<cr>

"  Switch between buffers with tabs
nnoremap  <silent>   <tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bnext<CR>
nnoremap  <silent> <s-tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bprevious<CR>

" ignore folders for ctrlp
set wildignore+=*/tmp/*,*/out/*,*/.git/*,*.so,*.swp,*.zip,*/environments-env/*,*/dep/*,*/mod/*,*/vendor/*

" highlightedyank
hi HighlightedyankRegion cterm=reverse gui=reverse
let g:highlightedyank_highlight_duration = 200

let g:ag_working_path_mode="r"

" Searching
"----------------------------
" Make all searches very magic.
" Also mark the position before you start searching to copy text back to
nnoremap / ms/\v
nnoremap ? ms?\v

" Ignore case in search, unless you type any capital letters, then it
" automatically switches to case sensitive search
set ignorecase
set smartcase

" Highlight search results
set hlsearch

" Live search while typing, shows matches before hitting enter
set incsearch

" Clear search highlighting
nnoremap <silent> <Leader>/ :nohlsearch<CR>

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

"----------------------------
" Navigation
"----------------------------
" Disable use of arrow keys in normal more
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"----------------------------
" Bindings
"----------------------------
" Make Y yank till end of line
nnoremap Y y$

"----------------------------
" vim-bookmarks conf
"----------------------------
" Auto save bookmarks
let g:bookmark_auto_save = 1

" Store the bookmarks in the projects
let g:bookmark_save_per_working_dir = 1

"----------------------------
" vim-airline conf
"----------------------------
" Show status bar by default
set laststatus=2

" Enable top tabline
let g:airline#extensions#tabline#enabled = 1

" Disable showing tabs in the tabline. This will ensure that the buffers are
" what is shown in the tabline at all times.
let g:airline#extensions#tabline#show_tabs = 0

" Enable powerline fonts.
let g:airline_powerline_fonts = 0

"----------------------------
" calendar conf
"----------------------------
" Enable Google Calendar integration.
let g:calendar_google_calendar = 1

" Enable Google Tasks integration.
let g:calendar_google_task = 1

" Other options
let g:calendar_first_day = "monday"           " Weeks starts with Monday
let g:calendar_date_endian = "big"            " Format: year / month / day
let g:calendar_date_separator = "-"           " Format: year - month - day
let g:calendar_week_number = 1                " Show week numbers
let g:calendar_view = "days"                  " Set days as the default view

"----------------------------
" tagbar conf
"----------------------------

g:tagbar_ctags_bin = "/usr/local/Cellar/universal-ctags/HEAD-a668cb1/bin/ctags"

" Add shortcut for toggling the tag bar
nnoremap <F3> :TagbarToggle<cr>

" Language: Go
" Tagbar configuration for Golang
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

"----------------------------
" vim-markdown conf
"----------------------------
" Disable folding
let g:vim_markdown_folding_disabled = 1

" Auto shrink the TOC, so that it won't take up 50% of the screen
let g:vim_markdown_toc_autofit = 1

"----------------------------
" neomake conf
"----------------------------
" When writing a buffer (no delay).
call neomake#configure#automake('w')

" Configure signs
let g:neomake_error_sign   = {'text': '✖', 'texthl': 'NeomakeErrorSign'}
let g:neomake_warning_sign = {'text': '∆', 'texthl': 'NeomakeWarningSign'}
let g:neomake_message_sign = {'text': '➤', 'texthl': 'NeomakeMessageSign'}
let g:neomake_info_sign    = {'text': 'ℹ', 'texthl': 'NeomakeInfoSign'}

:highlight NeomakeVirtualtextError ctermfg=167 guifg=#e45649

let g:neomake_python_enabled_makers = ['flake8']
let g:neomake_python_flake8_maker = {
		\ 'args': ['--max-line-length=100', 'format=default'],
		\ 'errorformat':
        \ '%E%f:%l: could not compile,%-Z%p^,' .
        \ '%A%f:%l:%c: %t%n %m,' .
        \ '%A%f:%l: %t%n %m,' .
        \ '%-G%.%#',
\ }

let g:neomake_sh_shellcheck_maker = {
        \ 'args': ['-fgcc', '-e', 'SC2143,SC2016,SC2002'],
        \ 'errorformat':
            \ '%f:%l:%c: %trror: %m,' .
            \ '%f:%l:%c: %tarning: %m,' .
            \ '%I%f:%l:%c: note: %m',
\ }

let g:neomake_golang_enabled_makers = []

"----------------------------
" nerdtree conf
"----------------------------
nnoremap <silent> <C-d> :NERDTreeToggle<cr>
nnoremap <silent> <C-s> :NERDTreeFind<cr>

" Files to ignore
let NERDTreeIgnore = [
    \ '\~$',
    \ '\.pyc$',
    \ '^\.DS_Store$',
    \ '^node_modules$',
    \ '^out$',
    \ '^tmp$',
    \ '^.ropeproject$',
    \ '^__pycache__$'
\]

let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
\ }

" Close vim if NERDTree is the only opened window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Show hidden files by default
let NERDTreeShowHidden = 1

" Allow NERDTree to change session root.
let g:NERDTreeChDirMode = 2

" Quit NERDTree on open
let NERDTreeQuitOnOpen = 1

" Delete the buffer of the file just deleted with NERDTree
let NERDTreeAutoDeleteBuffer = 1

" Change size of NERDTree
:let g:NERDTreeWinSize=50

" UI configs
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

"----------------------------
" Go
"----------------------------
au FileType go set noexpandtab
au FileType go set shiftwidth=8
au FileType go set softtabstop=8
au FileType go set tabstop=8

" Highlighting
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1

" Show type information
let g:go_auto_type_info = 1

" Highlight variable uses
let g:go_auto_sameids = 0

map <C-Down> :cnext<CR>
map <C-Up> :cprevious<CR>

nnoremap <leader>a :windo lcl\|ccl<CR>
autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <leader>d <Plug>(go-def)

" Fill struct with defaults
nnoremap <Leader>u :GoFillStruct<CR>

" Show all functions and types in file
nnoremap <Leader>f :GoDecls<CR>
" Show all functions and types in directory
nnoremap <Leader>F :GoDeclsDir<CR>

" Show doc
autocmd FileType go nmap <leader>d <Plug>(go-doc)
" Show doc in browser
autocmd FileType go nmap <leader>D <Plug>(go-doc-browser)

" Toggle highlight same identifiers
nnoremap <Leader>H :GoSameIdsToggle<CR>

nnoremap <leader>l :ls<CR>:b<space>

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction
autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

let g:go_fmt_command = "gopls"
let g:go_list_type = "quickfix"
let g:go_jump_to_error = 0

"----------------------------
" Bash
"----------------------------
au FileType sh set expandtab
au FileType sh set shiftwidth=2
au FileType sh set softtabstop=2
au FileType sh set tabstop=2

"----------------------------
" gitcommit
"----------------------------
au FileType gitcommit setlocal spell
au FileType gitcommit setlocal textwidth=80

"----------------------------
" gitconfig
"----------------------------
au FileType gitconfig set noexpandtab
au FileType gitconfig set shiftwidth=2
au FileType gitconfig set softtabstop=2
au FileType gitconfig set tabstop=2

"----------------------------------------------
" JavaScript
"----------------------------------------------
au FileType javascript set noexpandtab
au FileType javascript set shiftwidth=2
au FileType javascript set softtabstop=2
au FileType javascript set tabstop=2

"----------------------------
" JSON
"----------------------------
au FileType json set noexpandtab
au FileType json set shiftwidth=2
au FileType json set softtabstop=2
au FileType json set tabstop=2

"----------------------------
" Make
"----------------------------
au FileType make set noexpandtab
au FileType make set shiftwidth=2
au FileType make set softtabstop=2
au FileType make set tabstop=2

"----------------------------
" Markdown
"----------------------------
au FileType markdown setlocal spell
au FileType markdown set noexpandtab
au FileType markdown set shiftwidth=4
au FileType markdown set softtabstop=4
au FileType markdown set tabstop=4
au FileType markdown set syntax=markdown

"----------------------------
" Protobuf
"----------------------------
au FileType proto set noexpandtab
au FileType proto set shiftwidth=2
au FileType proto set softtabstop=2
au FileType proto set tabstop=2

"----------------------------
" Python
"----------------------------
au FileType python set expandtab
au FileType python set shiftwidth=4
au FileType python set softtabstop=4
au FileType python set tabstop=4

"----------------------------
" SQL
"----------------------------
au FileType sql set noexpandtab
au FileType sql set shiftwidth=2
au FileType sql set softtabstop=2
au FileType sql set tabstop=2

"----------------------------
" TOML
"----------------------------
au FileType toml set expandtab
au FileType toml set shiftwidth=2
au FileType toml set softtabstop=2
au FileType toml set tabstop=2

"----------------------------
" TypeScript
"----------------------------
au FileType typescript set noexpandtab
au FileType typescript set shiftwidth=4
au FileType typescript set softtabstop=4
au FileType typescript set tabstop=4

"----------------------------
" YAML
"----------------------------
au FileType yaml set expandtab
au FileType yaml set shiftwidth=2
au FileType yaml set softtabstop=2
au FileType yaml set tabstop=2

"---------------
" coc.nvim
"---------------
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use U to show documentation in preview window
nnoremap <silent> U :call <SID>show_documentation()<CR>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient [LC]
let g:go_def_mapping_enabled = 0

"---------------
" UltiSnips
"---------------
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsSnippetDirectories=["mpsnippets"]
